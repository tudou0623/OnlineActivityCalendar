action : userAction!login.action
input : { 
	userLoginID : string,
	password : string	   	 
};
output : {
	userLoginID: string,	// -1 when failed
	result : integer,	// 200
	sessionID: string,	// "0" when failed
	userID : integer	// -1 when failed
};
set session: {			// only when success, MUST be stored in browser.
	userLoginID: string,
	userID: integer
};


action : userAction!checkLoginStatus.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
output : {
	result : bool
};



function : userAction!register.action
input : {
	userLoginID : string,	// required
	password : string,	// required
	nickname : string,	// required
	email : string,		// required
};
output : {
	userLoginID: string,	// -1 when failed
	result : integer,	// 200
	sessionID: string,	// "0" when failed
	userID : integer	// -1 when failed
};
set session: {			// only when success, MUST stored in browser
	userLoginID: string,
	userID: integer
};



/*
* Define Privacy Type
	a) privacyType = 0: accessible to all ( only used in activity's privacy policies )
	b) privacyType = 1: accessible to registered users
	c) privacyType = 2: accessible to my cares and followers
	d) privacyType = 3: accessible to my cares
	e) privacyType = 4: accessible to my friends ( caring and followed )
	f) privacyType = 5: accessible to specific cares groups
	   grantedLoginIdlist: groupName list ( As a string, delimiter is ',' )
	g) privacyType = 6: accessible to specific cares
	   grantedLoginIdlist: userLoginId list ( As a string, delimiter is ',' )
*/

<!-- ----------------------------------------------------------------------------------------------------------------

function: userAction!logout.action
post session : {		// posted by  browser, no session is OK
	userLoginID: string,
	userID: integer
};
output : {
	result : bool
};


function: userAction!search.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input : {
	uname : string,		// user name
	psize : integer,	// page size
	pid:	integer		// selected page number
};
output : {
	count : long,		// total number of search results
	userList: [  { userID: integer, loginID:string, gender:string(M/F), signature:string } ,
		     { userID: integer, loginID:string, gender:string(M/F), signature:string } ,
			...
		  ]
};



function: careAction!getCareList.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	uid : integer,		// the userID of the care list you wanna get
};
output :{
	result:    integer,	// 0 for success, 1 for access denied, 2 for no cares, 3 for internal error
	careList:  
	[  { groupName:string,  userlist: [{ userID: xxx, loginID:xxx, remarkName:xxx, doDisplay:xxx},..., ] },
	   { groupName:string,  userlist: [{ userID: xxx, loginID:xxx, remarkName:xxx, doDisplay:xxx},..., ] },
		...
	]
	// the users' info is grouped by friendGroupName
};



function: careAction!getFollowerList.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	uid : integer,		// the owner userID of the followers list you wanna get
};
output :{
	result:    	integer,	// 0 for success, 1 for access denied, 2 for no followers, 3 for internal error
	followerList:	[ { userID: xxx, loginID:xxx } ,
			  { userID: xxx, loginID:xxx } ,
			  ...
			]
};


function: careAction!getCareGroupList.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	uid : integer,		// the owner userID of the CareGroup list you wanna get
};
output :{
	result:    	integer,	// 0 for success, 1 for access denied, 2 for no groups, 3 for internal error
	caregroupList:	[ { groupID: xxx, groupName:xxx } ,
			  { groupID: xxx, groupName:xxx } ,
			  ...
			]
};


function: careAction!addCare.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	uid : integer,		// the user id of the person u wanna care
	gid : integer,		// the group id of the person u wanna to put into
	remark: string,		// the remark name of the person u wanna to care
};
output :{
	result: integer,	// 0 for success, 1 for add care denied, 2 for no such person, 
				// 3 for error gid, 4 for already cared, 5 for internal error
};


function: careAction!cancelCare.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	uid : integer,		// the user id of the person u wanna cancel care
};
output :{
	result: integer,	// 0 for success, 2 for no such person, 
				// 3 for not cared, 4 for internal error
};


function: careAction!addFriendGroup.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	gname : string,		// the name of the new group u wanna add
};
output :{
	result: integer,	// 0 for success, 2 for location already exists, 3 for internal error
	gid:	integer		// the id of this newly created group (-1 when failed)
};


------------------------------------------------------------------------------------------------------------------- -->


function:activityAction!createAct.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	title:	string,			// required
	st:	timestamp,		// start time, required
	et:	timestamp,		// end time, required
	cap:	integer,		// capacity, if not set, means infinite
	pt:	integer,		// privacyType, required. default = 1: accessible to all registered users
	gl:	string,			// grantedIdList, required when privacyType=5,6
	pta:	integer,		// privacyTypeAttend, required. default = 1
	gla:	string,			// grantedIdListAttend, required when privacyTypeAttend=5,6 
	desc:	string,			// description
	lid:	integer			// locationId, required when location is set	
};
output :{
	result: integer,	// 0 for success, 1 for add activity denied, 
				// 2 for error lid, 3 for internal error
	aid:	integer		// the id of this newly created activity (-1 when failed)
};


function: locAction!addLoc.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	gname : string,		// the name of the new group u wanna add
};
output :{
	result: integer,	// 0 for success, 2 for group name already exists, 3 for internal error
	lid:	integer		// the id of this newly created location (-1 when failed)
};



function : changeUserSetting
input : {
	username : string,
	//somemore
};
output : {
	result : integer
};


function : userLogin
input : {
	username : string,
	password : string
};
output : {
	result : integer,
	userID : integer
};



function : createEvent
input : {
	createUser : integer,
	title : string,
	//somemore
};
output : { result : integer };


function : createInvite
input : { userID : integer,
	eventID : integer,
	//somemore
};
output : { result : integer };


function : followFriend

function : unfollowFriend


function : getUserCalendar
input : {
	currentUserID : integer,
	queriedUserID : integer,
	queriedDate : date
};
output : { eventList : [] };

function : addEventToMyCalendar
input : {
	eventID : integer,
	userID : integer
};
output : { result : integer };
