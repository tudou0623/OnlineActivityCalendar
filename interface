action : userAction!login.action
input : { 
	userLoginID : string,
	password : string	   	 
};
output : {
	userLoginID: string,	// -1 when failed
	result : integer,		// 200
	sessionID: string,		// "0" when failed
	userID : integer		// -1 when failed
};
set session: {				// only when success, MUST be stored in browser.
	userLoginID: string,
	userID: integer
};


action : userAction!checkLoginStatus.action
post session : {			// posted by  browser
	userLoginID: string,
	userID: integer
};
output : {
	result : bool
};



function : userAction!register.action
input : {
	userLoginID : string,	// required
	password : string,		// required
	nickname : string,		// required
	email : string,			// required
};
output : {
	userLoginID: string,	// -1 when failed
	result : integer,		// 200
	sessionID: string,		// "0" when failed
	userID : integer		// -1 when failed
};
set session: {				// only when success, MUST stored in browser
	userLoginID: string,
	userID: integer
};



/*
* Define Privacy Type
	a) privacyType = 0: accessible to all ( only used in activity's privacy policies )
	b) privacyType = 1: accessible to registered users
	c) privacyType = 2: accessible to my cares and followers
	d) privacyType = 3: accessible to my cares
	e) privacyType = 4: accessible to my friends ( caring and followed )
	f) privacyType = 5: accessible to specific cares groups
	   grantedLoginIdlist: groupName list ( As a string, delimiter is ',' )
	g) privacyType = 6: accessible to specific cares
	   grantedLoginIdlist: userLoginId list ( As a string, delimiter is ',' )
	h) privacyType = 7: accessible only to myself
	i) privacyType = 8: accessible to my followers
*/

<!-- ----------------------------------------------------------------------------------------------------------------

function: userAction!logout.action
post session : {		// posted by  browser, no session is OK
	userLoginID: string,
	userID: integer
};
output : {
	result : bool
};


function: userAction!search.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input : {
	uname : string,		// user name
	psize : integer,	// page size
	pid:	integer		// selected page number
};
output : {
	count : long,		// total number of search results
	userList: 
		[  { userID: integer, loginID:string, gender:string(M/F), signature:string, uname:string } ,
		   { userID: integer, loginID:string, gender:string(M/F), signature:string, uname:string } ,
				...
		]
};


// 获取用户基本信息（验证权限）
function: userAction!getUserInfo.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: 	integer
};
input : {
	uid:		integer,	// the id of the user whose info u wanna get
};
output : {
	result:		integer,	// 0 for success, 1 for access denied, 
							// 2 for error uid, 3 for internal error
	isCared:	bool,		// cared by u or not
	// 公开信息
	loginId:	integer,	// the user's loginId
	uname:		string,		// userName (remarkName when cared and ramarkName set)
	gender:		string,		// M/F
	regTime:	timestamp,	// 注册时间
	pimgId:		integer,	// 用户头像ID
	signature:	string,		// 个性签名
	grade:		integer,	// 等级
	isOnline:	bool,
	isV:		bool,		// 是否加V用户
	
	// 需访问权限信息
	score:		integer, 	// 积分
	money:		integer,	// 金钱
	email:		string,
	phone:		string,
	fetion:		string,
	uniId:		integer,	// 学校ID
	uniName:	string,		// 学校名称
	schId:		integer,	// 学院ID
	schName:	string,		// 学院名称
	
};


// 修改用户基本信息（验证权限）
function: userAction!setUserInfo.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input : {
	// 可修改信息(if the field not changed, don't send it)
	uname:		string,		// userName
	gender:		string,		// 格式(M/F)
	signature:	string,		// 个性签名
	email:		string,
	phone:		string,
	fetion:		string,
	uniId:		integer,	// 学校ID
	uniName:	string,		// 学校名称
	schId:		integer,	// 学院ID
	schName:	string,		// 学院名称
};
output : {
	result:		integer,	// 0 for success, 1 for access denied
							// 2 for error parameter, 3 for internal error
};


// 获取用户权限设置信息
function: userAction!getPrivacySettings.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
output : {
	result:		integer,	// 0 for success, 1 for access denied, 3 for internal error
	// userInfo privacy
	infoPt:		integer,	// userInfo privacyType
	infoGl:		string,		// 允许访问的用户loginIDs或者分组名（以逗号分隔）
	// 好友列表 privacy
	frliPt:		integer,	// 好友列表 privacyType
	frliGl:		string,		// 允许访问的用户loginIDs或者分组名（以逗号分隔）
	// calendar privacy
	calPt:		integer,	// calendar privacyType
	calGl:		string,		// 允许访问的用户loginIDs或者分组名（以逗号分隔）
};


// 设置权限
function: userAction!setPrivacySettings.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input : {
	// 可修改信息(if the field not changed, don't send it)
	// userInfo privacy
	infoPt:		integer,	// userInfo privacyType
	infoGl:		string,		// 允许访问的用户loginIDs或者分组名（以逗号分隔）
	// 好友列表 privacy
	frliPt:		integer,	// 好友列表 privacyType
	frliGl:		string,		// 允许访问的用户loginIDs或者分组名（以逗号分隔）
	// calendar privacy
	calPt:		integer,	// calendar privacyType
	calGl:		string,		// 允许访问的用户loginIDs或者分组名（以逗号分隔）
};
output : {
	result:		integer,	// 0 for success, 1 for access denied
							// 2 for error parameter, 3 for internal error
};


function: careAction!getCareList.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: 	integer
};
input :	{
	uid : integer,		// the userID of the care list you wanna get
};
output :{
	result:    integer,	// 0 for success, 1 for access denied, 2 for no cares, 3 for internal error
	careList:  
	[  
		{ groupName:	string,  
		  userlist: 
			[{ userID: integer, loginID:string, remarkName:string, doDisplay:bool, uname:string},..., ] 
		},
		{ groupName:	string,  
		  userlist: 
			[{ userID: integer, loginID:string, remarkName:string, doDisplay:bool, uname:string},..., ] 
		},
		...
	]
	// the users' info is grouped by friendGroupName
};


function: careAction!getFollowerList.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	uid : integer,		// the owner userID of the followers list you wanna get
};
output :{
	result:    	integer,	// 0 for success, 1 for access denied
							// 2 for no followers, 3 for internal error
	followerList:
		[ 	{ userID: integer, loginID:string, uname:string } ,
			{ userID: integer, loginID:string, uname:string } ,
			  ...
		]
};


function: careAction!getCareGroupList.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	uid : integer,		// the owner userID of the CareGroup list you wanna get
};
output :{
	result:    	integer,	// 0 for success, 1 for access denied
							// 2 for no groups, 3 for internal error
	caregroupList:	
		[ 	{ groupID: integer, groupName:string } ,
			{ groupID: integer, groupName:string } ,
			  ...
		]
};


function: careAction!addCare.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	uid : integer,		// the user id of the person u wanna care
	gid : integer,		// the group id of the person u wanna to put into
	remark: string,		// the remark name of the person u wanna to care
};
output :{
	result: integer,	// 0 for success, 1 for add care denied, 2 for no such person, 
						// 3 for error gid, 4 for already cared, 5 for internal error
};


function: careAction!cancelCare.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	uid : integer,		// the user id of the person u wanna cancel care
};
output :{
	result: integer,	// 0 for success, 2 for no such person, 
						// 3 for not cared, 4 for internal error
};


function: careAction!rejectCare.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	uid : integer,		// the user id of the person u wanna reject care
};
output :{
	result: integer,	// 0 for success, 1 for access denied, 2 for no such person, 
						// 3 for not cared, 4 for internal error
};


function: careAction!addFriendGroup.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	gname : string,		// the name of the new group u wanna add
};
output :{
	result: integer,	// 0 for success, 2 for group name already exists, 3 for internal error
	gid:	integer		// the id of this newly created group (-1 when failed)
};


function: careAction!reviseFriendGroup.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	gid:	integer		// the id of this group u wanna revise
	gname : string,		// the new name of the group
};
output :{
	result: integer,	// 0 for success, 1 for access denied
						// 2 for error parameter, 3 for internal error
};


function: careAction!deleteFriendGroup.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	gid:	integer		// the id of this group u wanna delete
};
output :{
	result: integer,	// 0 for success, 1 for access denied
						// 2 for error gid, 3 for internal error
};


------------------------------------------------------------------------------------------------------------------- -->


function: activityAction!createActivity.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: 	integer
};
input :{
	title:	string,			// required
	tag:	string,			// required
	st:		timestamp,		// start time, required
	et:		timestamp,		// end time, required
	cap:	integer,		// capacity, if not set, means infinite
	pt:		integer,		// privacyType, required. default = 1: accessible to all registered users
	gl:		string,			// grantedIdList, required when privacyType=5,6
	pta:	integer,		// privacyTypeAttend, required. default = 1
	gla:	string,			// grantedIdListAttend, required when privacyTypeAttend=5,6 
	desc:	string,			// description
	lid:	integer			// locationId, required when location is set	
};
output :{
	result: integer,		// 0 for success, 1 for add activity denied, 
							// 2 for error lid, 3 for internal error
	aid:	integer			// the id of this newly created activity (-1 when failed)
};


function: activityAction!viewActivity.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	aid:	integer,	// the activity id
};
output :{
	result: integer,		// 0 for success, 1 for access denied
							// 2 for error aid, 3 for internal error
	isAttend: bool,			// whether the viewer attends this activity
	creatorLoginId:	string,	// the creator's loginID
	creatorName:	string,	// the creator's name ( remarkName when cared and remarkName set )
	title:	string,
	tag:	string,
	st:	timestamp,			// start time
	et:	timestamp,			// end time
	cap:	integer,		// capacity, if not set, means infinite
	pt:	integer,			// privacyType
	gl:	string,				// grantedIdList, only creator can see this
	pta:	integer,		// privacyTypeAttend
	gla:	string,			// grantedIdListAttend, only creator can see this
	desc:	string,			// description
	lid:	integer,		// location Id
	lname:  string,			// location name
};


function: activityAction!reviseActivity.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	aid:	integer,		// the id of this activity u wanna revise
	// 可修改信息(if the field not changed, don't send it)
	title:	string,			// required
	tag:	string,			// required
	st:		timestamp,		// start time, required
	et:		timestamp,		// end time, required
	cap:	integer,		// capacity, if not set, means infinite
	pt:		integer,		// privacyType, required. default = 1: accessible to all registered users
	gl:		string,			// grantedIdList, required when privacyType=5,6
	pta:	integer,		// privacyTypeAttend, required. default = 1
	gla:	string,			// grantedIdListAttend, required when privacyTypeAttend=5,6 
	desc:	string,			// description
	lid:	integer			// locationId, required when location is set or changed	
};
output :{
	result: integer,	// 0 for success, 1 for revise activity denied, 
				// 2 for error lid, 3 for internal error
};


function: activityAction!deleteActivity.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	aid:	integer,		// the id of this activity u wanna delete
};
output :{
	result: integer,	// 0 for success, 1 for delete activity denied
						// 2 for error aid, 3 for internal error
};


// 搜索全网公开活动
function: activityAction!searchByTitle.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input : {
	title:	string,		// required
	tag:	string,		// activity type not limited if not provided 
	st:	timestamp,		// start time
	et:	timestamp,		// end time
	sb:	string,			// sort by "publishTime/startTime/endTime/creatorGrade"
	asc:	bool,		// true for asc, false for desc
	psize:	integer,	// page size
	pid:	integer		// selected page number
};
output : {
	count : long,		// total number of search results
	actList:  
	[ {  aid: integer, title: string, tag: string, cap: integer, st: timestamp, et: timestamp, 
			location: string, lid: integer, desc: string, creatorloginId: integer, creatorName:string },
	  {  aid: integer, title: string, tag: string, cap: integer, st: timestamp, et: timestamp, 
			location: string, lid: integer, desc: string, creatorloginId: integer, creatorName:string },
	  	  	...
	]
	// return all the public activities (description is limited to 500 words)
};


// not implemented yet
function: activityAction!searchByDescription.action


// 搜索好友发布的活动（经过权限验证，按好友id分组）
function: activityAction!searchUserActivitiesByTitle.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	idList: string,		// the creators' IDs of the activity u wanna get ( splitted by "," )
	title:	string,		// required
	tag:	string,		// activity type not limited if not provided
	st:	timestamp,		// start time
	et:	timestamp,		// end time
	sb:	string,			// sort by "publishTime/startTime/endTime"
	asc:	bool,		// true for asc, false for desc
	psize:	integer,	// page size(if not set, return all)
	pid:	integer		// selected page number
};
output :{
	result: integer,	// 0 for success, 1 for access denied
						// 2 for no activities, 3 for internal error
	count : long,		// total number of search results
	resultList:  
	[  
	 { 
	  	uid: 	  integer, 
	    actList:  
		[ { aid: integer, title: string, tag: string, cap: integer, st: timestamp, et: timestamp, 
			  location: string, lid: integer, desc: string, creatorloginId: integer, creatorName:string },
		  {  aid: integer, title: string, tag: string, cap: integer, st: timestamp, et: timestamp, 
			  location: string, lid: integer, desc: string, creatorloginId: integer, creatorName:string },
			...
	  	]
	 },
	   
	 { 
	  	uid: 	  integer, 
	    actList:  
		[ { aid: integer, title: string, tag: string, cap: integer, st: timestamp, et: timestamp, 
			  location: string, lid: integer, desc: string, creatorloginId: integer, creatorName:string },
		  {  aid: integer, title: string, tag: string, cap: integer, st: timestamp, et: timestamp, 
			  location: string, lid: integer, desc: string, creatorloginId: integer, creatorName:string },
			...
	  	]
	 },
		...
	]
	// the activities' info is grouped by user's id
	// (description is limited to 500 words)
};


// 搜索好友发布的活动（经过权限验证，不分组）
function: activityAction!searchUserActivitiesByTitleSimple.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	idList: string,		// the creators' IDs of the activity u wanna get ( splitted by "," )
	title:	string,		// required
	tag:	string,		// activity type not limited if not provided
	st:	timestamp,		// start time
	et:	timestamp,		// end time
	sb:	string,			// sort by "publishTime/startTime/endTime"
	asc:	bool,		// true for asc, false for desc
	psize:	integer,	// page size(if not set, return all)
	pid:	integer		// selected page number
};
output :{
	result: integer,	// 0 for success, 1 for access denied, 2 for no activities, 3 for internal error
	count : long,		// total number of search results
	actList:  
	[ {  aid: integer, title: string, tag: string, cap: integer, st: timestamp, et: timestamp, 
			location: string, lid: integer, desc: string, creatorloginId: integer, creatorName:string },
	  {  aid: integer, title: string, tag: string, cap: integer, st: timestamp, et: timestamp, 
			location: string, lid: integer, desc: string, creatorloginId: integer, creatorName:string },
	  	  	...
	]
	// return all the public activities (description is limited to 500 words)
	// (description is limited to 500 words)
};


function: inviteAction!invite.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	aid:	integer,	// the activity id
	idList:	string,		// the user IDs of the users u wanna invite ( splitted by "," )
};
output :{
	result: integer,	// 0 for success, 1 for invite denied, 2 for error aid, 3 for internal error
};

function: inviteAction!refuse.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	iid:	integer,	// the invitation id
};
output :{
	result: integer,	// 0 for success, 1 for access denied, 2 for error iid, 3 for internal error
};


function: attendAction!attendActivity.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	aid:	integer,	// the activity id
	pt:	integer,	// privacyType, required. default = 8: accessible to my followers
	gl:	string,		// grantedIdList, required when privacyType=5,6
	
};
output :{
	result: integer,	// 0 for success, 1 for access denied, 2 for error aid, 3 for internal error
};

function: attendAction!quitActivity.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	aid:	integer,	// the activity id
};
output :{
	result: integer,	// 0 for success, 1 for access denied, 2 for error aid, 3 for internal error
};


function: attendAction!rejectAttendByCreator.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	aid:	integer,	// the activity id
	uid:	integer,	// the id of the user u wanna reject
};
output :{
	result: integer,	// 0 for success, 1 for access denied
						// 2 for invalid parameter, 3 for internal error
};

// 搜索好友参加的活动日程（经过权限验证）
function: attendAction!getUserCalendar.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	idList: string,		// required. the IDs of the users whose calendar u wanna get ( splitted by "," )
	title:	string,		// required
	tag:	string,		// activity type not limited if not provided
	st:	timestamp,		// start time
	et:	timestamp,		// end time
	sb:	string,			// sort by "publishTime/startTime/endTime"
	asc:	bool,		// true for asc, false for desc
	psize:	integer,	// page size
	pid:	integer		// selected page number
};
output :{
	result: integer,	// 0 for success, 1 for access denied, 2 for no activities, 3 for internal error
	resultList:  
	[  
	 { 
	  	uid: 	  integer, 
	    actList:  
		[ { aid: integer, title: string, tag: string, cap: integer, st: timestamp, et: timestamp, 
			  location: string, lid: integer, desc: string, creatorloginId: integer, creatorName:string },
		  {  aid: integer, title: string, tag: string, cap: integer, st: timestamp, et: timestamp, 
			  location: string, lid: integer, desc: string, creatorloginId: integer, creatorName:string },
			...
	  	]
	 },
	   
	 { 
	  	uid: 	  integer, 
	    actList:  
		[ { aid: integer, title: string, tag: string, cap: integer, st: timestamp, et: timestamp, 
			  location: string, lid: integer, desc: string, creatorloginId: integer, creatorName:string },
		  {  aid: integer, title: string, tag: string, cap: integer, st: timestamp, et: timestamp, 
			  location: string, lid: integer, desc: string, creatorloginId: integer, creatorName:string },
			...
	  	]
	 },
		...
	]
	// the activities' info is grouped by user's id
	// (description is limited to 500 words)
};



function: locAction!addLoaction.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :	{
	gname : string,		// the name of the new group u wanna add
};
output :{
	result: integer,	// 0 for success, 1 for location already exists, 
				// 2 for parameter error, 3 for internal error
	lid:	integer		// the id of this newly created location (-1 when failed)
};







------------------------------------------------------------------------------------------------------------------- -->
// 图像操作
function: userAction!uploadUserPortrait.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	imgName:	string,
	descr:		string,		// description
	img:		blob,		// img data
	setCurr:	bool,		// if u like to set it as current portrait	
};
output :{
	result: integer,	// 0 for success, 1 for upload denied
						// 2 for invalid parameter, 3 for internal error
	imgId:	integer		// the id of this newly uploaded image (-1 when failed)
};


function: userAction!getUserPortrait.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	uid:		integer,	// id of the user whose portrait u wanna get
};
output :{
	result: 	integer,	// 0 for success, 1 for access denied
							// 2 for error uid, 3 for internal error
	imgName:	string,
	descr:		string,		// description
	img:		blob,		// img data
};


function: userAction!reviseUserPortrait.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	// 可修改信息(if the field not changed, don't send it)
	imgId:		integer,	// id of the image u wanna revise
	imgName:	string,
	descr:		string,		// description
	img:		blob,		// img data
	setCurr:	bool,		// 是否设为当前头像
};
output :{
	result: integer,	// 0 for success, 1 for revise denied
						// 2 for invalid parameter, 3 for internal error
};

function: userAction!deleteUserPortrait.action
post session : {		// posted by  browser
	userLoginID: string,
	userID: integer
};
input :{
	imgId:		integer,	// id of the image u wanna delete
};
output :{
	result: integer,	// 0 for success, 1 for delete denied
						// 2 for invalid imgId, 3 for internal error
};




------------------------------------------------------------------------------------------------------------------- -->
function : changeUserSetting

function : userLogin

function : createEvent

function : createInvite

function : followFriend

function : unfollowFriend

function : getUserCalendar

function : addEventToMyCalendar
